syntax = "proto3";

package TW.Ethereum.Proto;
option java_package = "wallet.core.jni.proto";

// Transaction payload (transfer, smart contract call, ...)
message Payload {
    // Native coin transfer transaction
    message Transfer {
        // Amount to send in wei (256-bit number)
        bytes amount = 1;
    }

    // ERC20 token transfer transaction
    message ERC20Transfer {
        string to = 1;

        // Amount to send (256-bit number)
        bytes amount = 2;
    }

    // ERC721 NFT transfer transaction
    message ERC721Transfer {
        string from = 1;

        string to = 2;

        // ID of the token (256-bit number)
        bytes token_id = 3;
    }

    // Generic smart contract transaction
    message Generic {
        // Optional payload
        bytes payload = 1;
    }

    oneof payload_oneof {
        Transfer payload_transfer = 1;
        ERC20Transfer payload_erc20 = 2;
        ERC721Transfer payload_erc721 = 3;
        Generic payload_contract_generic = 4;
    }
}

// Input data necessary to create a signed transaction.
message SigningInput {
    // Chain identifier (256-bit number)
    bytes chain_id = 1;

    // Nonce (256-bit number)
    bytes nonce = 2;

    // Gas price (256-bit number)
    bytes gas_price = 3;

    // Gas limit (256-bit number)
    bytes gas_limit = 4;

    // Recipient's address.
    string to_address = 5;

    // Private key.
    bytes private_key = 6;

    Payload payload = 7;
}

// Transaction signing output.
message SigningOutput {
    // Signed and encoded transaction bytes.
    bytes encoded = 1;

    bytes v = 2;
    bytes r = 3;
    bytes s = 4;
}
